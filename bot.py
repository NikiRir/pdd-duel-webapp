import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart
from database import Database

logging.basicConfig(level=logging.INFO)

BOT_TOKEN = "8390787038:AAHChRwHsSbDKHcXEqS8oJXhi0_ASUSq4P8"
# –ó–ê–ú–ï–ù–ò –Ω–∞ —Å–≤–æ–π GitHub Pages URL
WEBAPP_URL = "https://—Ç–≤–æ–π-username.github.io/pdd-duel-webapp"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
db = Database()

def get_main_keyboard():
    webapp_url = f"{WEBAPP_URL}/index.html"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üéÆ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", 
            web_app=WebAppInfo(url=webapp_url)
        )],
        [InlineKeyboardButton(text="üìä –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤", callback_data="top_players")],
        [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
    ])
    return keyboard

@dp.message(CommandStart())
async def cmd_start(message: Message):
    user = db.get_or_create_user(message.from_user.id, message.from_user.username, message.from_user.first_name)
    
    welcome_text = f"""
üöó –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ü–î–î –î—É—ç–ª–∏! 
–°–æ—Ä–µ–≤–Ω—É–π—Å—è —Å –¥—Ä—É–∑—å—è–º–∏ –≤ –∑–Ω–∞–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª –¥–æ—Ä–æ–∂–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è.

üéØ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ ü§∫ –î—É—ç–ª–∏ 1 –Ω–∞ 1
‚Ä¢ üìö –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø–æ –±–∏–ª–µ—Ç–∞–º  
‚Ä¢ üèÜ –†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤
‚Ä¢ üéÆ –£–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –±–∞—Ç—Ç–ª—ã

–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!
    """
    
    await message.answer(welcome_text, reply_markup=get_main_keyboard())

@dp.callback_query(F.data == "top_players")
async def show_top_players(callback: types.CallbackQuery):
    top_users = db.get_top_users(10)
    
    if not top_users:
        await callback.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∏–≥—Ä–æ–∫–∞—Ö")
        return
    
    text = "üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –≤–∏–Ω—Ä–µ–π—Ç—É:\n\n"
    for i, user in enumerate(top_users, 1):
        user_id, username, first_name, wins, losses, total_games, win_rate = user
        name = first_name or username or f"–ò–≥—Ä–æ–∫ {user_id}"
        text += f"{i}. {name} - {win_rate}% ({wins}/{total_games})\n"
    
    await callback.message.answer(text)

@dp.callback_query(F.data == "help")
async def show_help(callback: types.CallbackQuery):
    help_text = """
‚ùì –ö–∞–∫ –∏–≥—Ä–∞—Ç—å:

1. –ù–∞–∂–º–∏ "–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
2. –í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –∏–≥—Ä—ã:
   - ü§∫ –î—É—ç–ª—å: –°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–æ–º
   - üìö –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: –ü—Ä–∞–∫—Ç–∏–∫–∞ –±–µ–∑ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
3. –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –±—ã—Å—Ç—Ä–æ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
4. –ü–æ–¥–Ω–∏–º–∞–π—Å—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ!

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –í–∏–Ω—Ä–µ–π—Ç = (–ü–æ–±–µ–¥—ã / –í—Å–µ –∏–≥—Ä—ã) * 100%
‚Ä¢ –ú–∏–Ω–∏–º—É–º 5 –∏–≥—Ä –¥–ª—è –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ —Ç–æ–ø
    """
    await callback.message.answer(help_text)

async def main():
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
