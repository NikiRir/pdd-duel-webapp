let tg = window.Telegram.WebApp;
tg.expand();
tg.enableClosingConfirmation();

let currentUser = null;
let currentQuestions = [];
let currentQuestionIndex = 0;
let userScore = 0;
let selectedAnswers = [];
let timerInterval = null;

document.addEventListener('DOMContentLoaded', function() {
    initApp();
});

function initApp() {
    currentUser = tg.initDataUnsafe.user;
    loadTickets();
}

function showScreen(screenId) {
    document.querySelectorAll('.screen').forEach(screen => {
        screen.classList.remove('active');
    });
    document.getElementById(screenId).classList.add('active');
}

function backToMain() {
    showScreen('mainScreen');
}

function backToDuelModes() {
    showScreen('duelModeScreen');
}

function loadTickets() {
    const grid = document.getElementById('ticketGrid');
    for (let i = 1; i <= 40; i++) {
        const button = document.createElement('button');
        button.className = 'ticket-btn';
        button.textContent = i;
        button.onclick = () => createDuel('ticket', 20, i);
        grid.appendChild(button);
    }
}

function showTicketSelection() {
    showScreen('ticketScreen');
}

function startDuel() {
    showScreen('duelModeScreen');
}

function startTraining() {
    startGameSession('training', 'random', 10);
}

function createDuel(mode, questionCount, ticketNumber = null) {
    const duelId = Math.random().toString(36).substr(2, 9).toUpperCase();
    
    document.getElementById('duelId').textContent = duelId;
    showScreen('waitingScreen');
    
    setTimeout(() => {
        startGameSession('duel', mode, questionCount, ticketNumber, duelId);
    }, 3000);
}

function copyDuelId() {
    const duelId = document.getElementById('duelId').textContent;
    navigator.clipboard.writeText(duelId).then(() => {
        tg.showPopup({
            title: '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!',
            message: 'ID –¥—É—ç–ª–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞'
        });
    });
}

function cancelDuel() {
    showScreen('duelModeScreen');
}

function showStats() {
    tg.showPopup({
        title: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
        message: '–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...'
    });
}

function showTop() {
    tg.showPopup({
        title: '–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤',
        message: '–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...'
    });
}

function startGameSession(type, mode, questionCount, ticketNumber = null, duelId = null) {
    const questions = generateMockQuestions(questionCount);
    currentQuestions = questions;
    currentQuestionIndex = 0;
    userScore = 0;
    selectedAnswers = [];
    
    showScreen('questionScreen');
    displayQuestion();
}

function generateMockQuestions(count) {
    const questions = [];
    const questionTexts = [
        "–†–∞–∑—Ä–µ—à–µ–Ω–æ –ª–∏ –í–∞–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞–∑–≤–æ—Ä–æ—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –º–µ—Å—Ç–µ?",
        "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —ç—Ç–æ—Ç –¥–æ—Ä–æ–∂–Ω—ã–π –∑–Ω–∞–∫?",
        "–° –∫–∞–∫–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –¥–≤–∏–∂–µ–Ω–∏–µ –≤ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–º –ø—É–Ω–∫—Ç–µ?",
        "–û–±—è–∑–∞–Ω—ã –ª–∏ –í—ã –≤–∫–ª—é—á–∏—Ç—å —É–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ–≤–æ—Ä–æ—Ç–∞ –≤ –¥–∞–Ω–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏?",
        "–ö—Ç–æ –∏–º–µ–µ—Ç –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –≤ –¥–≤–∏–∂–µ–Ω–∏–∏?",
        "–†–∞–∑—Ä–µ—à–µ–Ω–∞ –ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –º–µ—Å—Ç–µ?",
        "–ß—Ç–æ –¥–æ–ª–∂–µ–Ω —Å–¥–µ–ª–∞—Ç—å –≤–æ–¥–∏—Ç–µ–ª—å –≤ —ç—Ç–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏?",
        "–†–∞–∑—Ä–µ—à–µ–Ω–æ –ª–∏ –í–∞–º –æ–±–æ–≥–Ω–∞—Ç—å –≥—Ä—É–∑–æ–≤–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å?",
        "–ö–∞–∫–æ–π –∑–Ω–∞–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é –¥–æ—Ä–æ–≥—É?",
        "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –º–∏–≥–∞—é—â–∏–π –∑–µ–ª–µ–Ω—ã–π —Å–∏–≥–Ω–∞–ª —Å–≤–µ—Ç–æ—Ñ–æ—Ä–∞?"
    ];
    
    for (let i = 0; i < count; i++) {
        questions.push({
            id: i + 1,
            text: questionTexts[i % questionTexts.length],
            image: null,
            options: [
                { id: 1, text: "–†–∞–∑—Ä–µ—à–µ–Ω–æ" },
                { id: 2, text: "–†–∞–∑—Ä–µ—à–µ–Ω–æ, –µ—Å–ª–∏ –Ω–µ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –ø–æ–º–µ—Ö–∏" },
                { id: 3, text: "–ó–∞–ø—Ä–µ—â–µ–Ω–æ" },
                { id: 4, text: "–ó–∞–ø—Ä–µ—â–µ–Ω–æ, –∫—Ä–æ–º–µ —Å–ª—É—á–∞–µ–≤..." }
            ].slice(0, 3),
            correctAnswer: Math.floor(Math.random() * 3) + 1
        });
    }
    return questions;
}

function displayQuestion() {
    const question = currentQuestions[currentQuestionIndex];
    if (!question) return;
    
    const progress = ((currentQuestionIndex) / currentQuestions.length) * 100;
    document.getElementById('progressFill').style.width = progress + '%';
    
    document.getElementById('questionNumber').textContent = 
        `${currentQuestionIndex + 1}/${currentQuestions.length}`;
    
    document.getElementById('questionText').textContent = question.text;
    
    const imageContainer = document.getElementById('questionImage');
    imageContainer.innerHTML = '';
    
    const optionsContainer = document.getElementById('optionsContainer');
    optionsContainer.innerHTML = '';
    
    question.options.forEach(option => {
        const button = document.createElement('button');
        button.className = 'option-btn';
        button.textContent = option.text;
        button.onclick = () => selectAnswer(option.id);
        optionsContainer.appendChild(button);
    });
    
    startTimer(30);
}

function startTimer(seconds) {
    let timeLeft = seconds;
    const timerElement = document.getElementById('timer');
    
    if (timerInterval) clearInterval(timerInterval);
    
    timerInterval = setInterval(() => {
        timeLeft--;
        timerElement.textContent = timeLeft + 's';
        
        if (timeLeft <= 0) {
            clearInterval(timerInterval);
            handleTimeUp();
        }
    }, 1000);
}

function selectAnswer(optionId) {
    if (timerInterval) clearInterval(timerInterval);
    
    const question = currentQuestions[currentQuestionIndex];
    const isCorrect = optionId === question.correctAnswer;
    
    const options = document.querySelectorAll('.option-btn');
    options.forEach(btn => {
        const btnText = btn.textContent;
        const correspondingOption = question.options.find(opt => opt.text === btnText);
        if (correspondingOption) {
            if (correspondingOption.id === question.correctAnswer) {
                btn.classList.add('correct');
            } else if (correspondingOption.id === optionId && !isCorrect) {
                btn.classList.add('incorrect');
            }
        }
    });
    
    if (isCorrect) {
        userScore++;
    }
    
    selectedAnswers.push({
        questionIndex: currentQuestionIndex,
        selectedAnswer: optionId,
        isCorrect: isCorrect
    });
    
    setTimeout(() => {
        currentQuestionIndex++;
        if (currentQuestionIndex < currentQuestions.length) {
            displayQuestion();
        } else {
            showResults();
        }
    }, 2000);
}

function handleTimeUp() {
    selectedAnswers.push({
        questionIndex: currentQuestionIndex,
        selectedAnswer: null,
        isCorrect: false
    });
    
    currentQuestionIndex++;
    if (currentQuestionIndex < currentQuestions.length) {
        displayQuestion();
    } else {
        showResults();
    }
}

function showResults() {
    document.getElementById('playerScore').textContent = userScore;
    document.getElementById('opponentScore').textContent = Math.floor(Math.random() * 10);
    
    const resultMessage = document.getElementById('resultMessage');
    if (userScore > 5) {
        resultMessage.textContent = 'üéâ –ü–æ–±–µ–¥–∞! –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!';
        resultMessage.style.background = 'linear-gradient(45deg, #4ECDC4, #44A08D)';
    } else if (userScore > 3) {
        resultMessage.textContent = 'üëç –•–æ—Ä–æ—à–æ! –ú–æ–∂–Ω–æ –ª—É—á—à–µ!';
        resultMessage.style.background = 'linear-gradient(45deg, #FFA726, #FFB74D)';
    } else {
        resultMessage.textContent = 'üòî –ü–æ—Ä–∞–∂–µ–Ω–∏–µ. –¢—Ä–µ–Ω–∏—Ä—É–π—Å—è –±–æ–ª—å—à–µ!';
        resultMessage.style.background = 'linear-gradient(45deg, #FF6B6B, #FF8E53)';
    }
    
    showScreen('resultsScreen');
}
