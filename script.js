/* ===== –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è ===== */
const REPO = "etspring/pdd_russia";
const BRANCH = "master";

/* ===== –ó–µ—Ä–∫–∞–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ JSON/–∫–∞—Ä—Ç–∏–Ω–æ–∫ =====
   1) jsDelivr  (–æ–±—ã—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ Telegram WebView)
   2) raw.githubusercontent (–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π RAW)
   3) GitHub API (JSON base64) ‚Äî –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π fallback
*/
const MIRRORS_JSON = [
  (p) => `https://cdn.jsdelivr.net/gh/${REPO}@${BRANCH}/${p}`,
  (p) => `https://raw.githubusercontent.com/${REPO}/${BRANCH}/${p}`,
  (p) => `https://api.github.com/repos/${REPO}/contents/${p}?ref=${BRANCH}`, // —Å–ø–µ—Ü. –æ–±—Ä–∞–±–æ—Ç–∫–∞
];
const MIRROR_IMG = (p) => `https://cdn.jsdelivr.net/gh/${REPO}@${BRANCH}/${p}`;

/* ===== –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ===== */
const State = {
  pool: [],
  byTicket: new Map(),
  topics: new Map(),
  duel: null,
};

/* ===== DOM Ready ===== */
document.addEventListener("DOMContentLoaded", () => {
  bindUI();
  initApp();
});

async function initApp() {
  toast("üì• –ó–∞–≥—Ä—É–∂–∞—é —Ä–µ–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ü–î–î‚Ä¶");
  try {
    await loadAllData();
    toast(`‚úÖ –ì–æ—Ç–æ–≤–æ! –í–æ–ø—Ä–æ—Å–æ–≤: ${State.pool.length}, —Ç–µ–º: ${State.topics.size}`);
  } catch (e) {
    console.error(e);
    toast("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç/Telegram.");
  }
}

/* ===== –ö–Ω–æ–ø–∫–∏ ===== */
function bindUI() {
  qs("#btnQuickDuel").onclick = () => startDuel({ mode: "quick" });
  qs("#btnTopics").onclick = () => showTopics();
  qs("#btnTickets").onclick = () => showTickets();
  qs("#btnStats").onclick = () =>
    toast("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —á–µ—Ä–µ–∑ Telegram WebApp");
}

/* ===== –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===== */
async function loadAllData() {
  // –¢–æ—á–∫–∏ –≤—Ö–æ–¥–∞ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è)
  const ticketCandidates = [
    "questions/tickets_A_B.json",
    "questions/tickets.json",
    "questions/tickets_C_D.json",
  ];
  const topicCandidates = ["questions/topics.json", "questions/topic.json"];

  const ticketsRaw = await fetchFirstJson(ticketCandidates);
  const topicsRaw = await fetchFirstJson(topicCandidates); // –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å ‚Äî –æ–∫

  const tickets = Array.isArray(ticketsRaw)
    ? ticketsRaw
    : ticketsRaw?.tickets || ticketsRaw?.data || [];

  const topics = Array.isArray(topicsRaw)
    ? topicsRaw
    : topicsRaw?.topics || topicsRaw?.data || topicsRaw?.topic || [];

  // –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
  const t1 = normalizeQuestions(tickets);
  for (const q of t1) {
    State.pool.push(q);
    if (q.ticket != null) {
      const arr = State.byTicket.get(q.ticket) || [];
      arr.push(q);
      State.byTicket.set(q.ticket, arr);
    }
    for (const t of q.topics) {
      const arr = State.topics.get(t) || [];
      arr.push(q);
      State.topics.set(t, arr);
    }
  }

  const t2 = normalizeQuestions(topics);
  for (const q of t2) {
    if (!State.pool.find((x) => x.id === q.id)) State.pool.push(q);
    for (const t of q.topics) {
      const arr = State.topics.get(t) || [];
      if (!arr.find((x) => x.id === q.id)) arr.push(q);
      State.topics.set(t, arr);
    }
  }
}

/* –ó–∞–≥—Ä—É–∂–∞–µ–º JSON, –ø—Ä–æ–±—É—è –∑–µ—Ä–∫–∞–ª–∞ –ø–æ –æ—á–µ—Ä–µ–¥–∏ */
async function fetchFirstJson(paths) {
  for (const path of paths) {
    // 1 –∏ 2 –∑–µ—Ä–∫–∞–ª–∞ ‚Äî —Å—Ä–∞–∑—É –∫–∞–∫ —Ç–µ–∫—Å—Ç JSON
    for (let i = 0; i < 2; i++) {
      try {
        const url = MIRRORS_JSON[i](path) + `?nocache=${Date.now()}`;
        const r = await fetch(url, { cache: "no-store" });
        if (r.ok) return await r.json();
      } catch {}
    }
    // 3-–µ –∑–µ—Ä–∫–∞–ª–æ ‚Äî GitHub API (content base64)
    try {
      const url = MIRRORS_JSON[2](path);
      const r = await fetch(url, { cache: "no-store" });
      if (!r.ok) throw 0;
      const data = await r.json();
      if (data && data.content) {
        const text = atob(data.content);
        return JSON.parse(text);
      }
    } catch {}
  }
  return []; // –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –≤–µ—Ä–Ω—ë–º –ø—É—Å—Ç–æ, –¥–∞–ª—å—à–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–µ–º
}

/* –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∫ –æ–±—â–µ–º—É –≤–∏–¥—É */
function normalizeQuestions(raw) {
  const out = [];
  for (const q of raw) {
    const answers = (q.answers || []).map(
      (a) => a.answer_text || a.text || String(a)
    );
    const correctIndex = (q.answers || []).findIndex(
      (a) => a.is_correct === true || a.correct === true
    );
    const topics = Array.isArray(q.topic)
      ? q.topic
      : q.topic
      ? [q.topic]
      : [];

    out.push({
      id: q.id || crypto.randomUUID(),
      question: q.question || q.title || "–í–æ–ø—Ä–æ—Å",
      answers: answers.length ? answers : ["–î–∞", "–ù–µ—Ç", "–ù–µ –∑–Ω–∞—é"],
      correctIndex: correctIndex >= 0 ? correctIndex : 0,
      ticket: q.ticket_number ?? q.ticket ?? null,
      topics,
      image: q.image || null,
      tip: q.answer_tip || q.tip || null,
    });
  }
  return out;
}

/* ===== –î—É—ç–ª—å / –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ ===== */
function startDuel({ mode, topic = null }) {
  const src = topic ? State.topics.get(topic) || [] : State.pool;
  if (!src.length) return toast("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã");

  const questions = shuffle(src).slice(0, 20); // 20 –≤–æ–ø—Ä–æ—Å–æ–≤
  State.duel = { mode, topic, i: 0, me: 0, ai: 0, q: questions, timerMs: 25000 };
  renderQuestion();
}

function renderQuestion() {
  const d = State.duel;
  const q = d.q[d.i];
  const container = qs("#screen");
  container.innerHTML = `
    <div class="card">
      <div class="meta">
        <div>–í–æ–ø—Ä–æ—Å ${d.i + 1}/${d.q.length}${
    q.ticket != null ? " ‚Ä¢ –ë–∏–ª–µ—Ç " + escape(q.ticket) : ""
  }</div>
        <div class="timer"><div class="tbar" id="tbar"></div></div>
      </div>
      <h3>${escape(q.question)}</h3>
      ${q.image ? `<img class="qimg" src="${imageUrl(q.image)}" alt=""/>` : ""}
      <div class="grid">
        ${q.answers
          .map((a, i) => `<div class="answer" data-i="${i}">${escape(a)}</div>`)
          .join("")}
      </div>
      ${q.tip ? `<div class="meta" style="margin-top:8px"><span>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</span><span>${escape(q.tip)}</span></div>` : ""}
      <div class="meta" style="margin-top:6px">
        <div>–¢—ã: <b>${d.me}</b></div><div>–ò–ò: <b>${d.ai}</b></div>
      </div>
    </div>
  `;

  // —Ç–∞–π–º–µ—Ä
  let left = d.timerMs;
  const bar = qs("#tbar");
  const t = setInterval(() => {
    left -= 50;
    bar.style.width = Math.max(0, (100 * left) / d.timerMs) + "%";
    if (left <= 0) {
      clearInterval(t);
      finish(-1);
    }
  }, 50);

  qsa(".answer").forEach((el) => {
    el.onclick = () => {
      clearInterval(t);
      finish(+el.dataset.i);
    };
  });

  function finish(i) {
    const correct = q.correctIndex;
    qsa(".answer").forEach((el, j) => {
      el.classList.add(j === correct ? "correct" : j === i ? "wrong" : "");
      el.style.pointerEvents = "none";
    });
    if (i === correct) {
      d.me++;
      toast("‚úÖ –í–µ—Ä–Ω–æ!");
    } else toast("‚ùå –û—à–∏–±–∫–∞");

    // –ò–ò (85% —Ç–æ—á–Ω–æ—Å—Ç—å)
    const ai = Math.random() < 0.85 ? correct : pickWrong(correct, q.answers.length);
    if (ai === correct) d.ai++;

    setTimeout(() => {
      d.i++;
      d.i < d.q.length ? renderQuestion() : finishDuel();
    }, 600);
  }
}

function finishDuel() {
  const d = State.duel;
  qs("#screen").innerHTML = `
    <div class="card">
      <h3>${d.me > d.ai ? "üèÜ –ü–æ–±–µ–¥–∞!" : d.me < d.ai ? "üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–µ" : "ü§ù –ù–∏—á—å—è"}</h3>
      <p style="margin:6px 0 0">–¢—ã: <b>${d.me}</b> ‚Ä¢ –ò–ò: <b>${d.ai}</b></p>
      <div class="grid two" style="margin-top:10px">
        <button class="btn btn-primary" id="again">–ï—â—ë —Ä–∞–∑</button>
        <button class="btn" id="home">–ù–∞ –≥–ª–∞–≤–Ω—É—é</button>
      </div>
    </div>`;
  qs("#again").onclick = () => startDuel({ mode: d.mode, topic: d.topic });
  qs("#home").onclick = () => (qs("#screen").innerHTML = "");
}

/* ===== –¢–µ–º—ã / –ë–∏–ª–µ—Ç—ã ===== */
function showTopics() {
  const list = [...State.topics.keys()].sort();
  if (!list.length) return toast("‚ùå –¢–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
  qs("#screen").innerHTML = `
    <div class="card">
      <h3>–¢–µ–º—ã</h3>
      <div class="grid auto" style="margin-top:8px">
        ${list.map((t) => `<div class="answer" data-t="${escape(t)}">${escape(t)}</div>`).join("")}
      </div>
    </div>`;
  qsa("[data-t]").forEach((e) => (e.onclick = () => startDuel({ mode: "topic", topic: e.dataset.t })));
}

function showTickets() {
  const list = [...new Set(State.pool.map((q) => q.ticket).filter((x) => x != null))].sort((a,b)=>a-b);
  if (!list.length) return toast("‚ùå –ë–∏–ª–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
  qs("#screen").innerHTML = `
    <div class="card">
      <h3>–ë–∏–ª–µ—Ç—ã</h3>
      <div class="grid auto" style="margin-top:8px">
        ${list.map((t) => `<div class="answer" data-n="${t}">–ë–∏–ª–µ—Ç ${t}</div>`).join("")}
      </div>
    </div>`;
  qsa("[data-n]").forEach((e) => (e.onclick = () => startTicket(+e.dataset.n)));
}

function startTicket(n) {
  const arr = State.pool.filter((q) => q.ticket === n);
  if (!arr.length) return toast("–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –±–∏–ª–µ—Ç–∞");
  State.duel = { mode: "ticket", topic: null, i: 0, me: 0, ai: 0, q: shuffle(arr).slice(0, 20), timerMs: 25000 };
  renderQuestion();
}

/* ===== –£—Ç–∏–ª–∏—Ç—ã ===== */
const qs = (s) => document.querySelector(s);
const qsa = (s) => [...document.querySelectorAll(s)];
function toast(text){ const t=qs("#toast"); t.innerHTML=`<div class="toast">${escape(text)}</div>`; t.style.opacity=1; setTimeout(()=>t.style.opacity=0,1500); }
function escape(s){ return String(s).replace(/[&<>"']/g, m=>({"&":"&amp;","<":"&lt;",">":"&gt;","\"":"&quot;","'":"&#39;"}[m])); }
function shuffle(a){ return a.map(x=>[Math.random(),x]).sort((a,b)=>a[0]-b[0]).map(x=>x[1]); }
function pickWrong(c,n){ const arr=[...Array(n).keys()].filter(i=>i!==c); return arr[Math.floor(Math.random()*arr.length)]; }
function imageUrl(p){ if(!p) return ""; const clean=String(p).replace(/^\.\//,"").replace(/^\//,""); return MIRROR_IMG(clean); }
