/* =======================
   –ì–õ–û–ë–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï
======================= */
const State = {
  pool: [],            // –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã
  byTicket: new Map(), // –Ω–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞ -> –≤–æ–ø—Ä–æ—Å—ã
  topics: new Map(),   // —Ç–µ–º–∞ -> –≤–æ–ø—Ä–æ—Å—ã
  penalties: null,     // —à—Ç—Ä–∞—Ñ—ã
  markup: null,        // —Ä–∞–∑–º–µ—Ç–∫–∞
  duel: null
};

/* =======================
   –°–¢–ê–†–¢
======================= */
document.addEventListener("DOMContentLoaded", () => {
  bindMenu();
  initApp();
});

async function initApp() {
  toast("üì• –ó–∞–≥—Ä—É–∂–∞—é –±–∏–ª–µ—Ç—ã, —Ç–µ–º—ã, —Ä–∞–∑–º–µ—Ç–∫—É –∏ —à—Ç—Ä–∞—Ñ—ã‚Ä¶");
  await loadTicketsAndBuildTopics();    // –±–∏–ª–µ—Ç—ã + —Ç–µ–º—ã –∏–∑ –±–∏–ª–µ—Ç–æ–≤
  await Promise.all([loadPenalties(), loadMarkup()]);
  toast(`‚úÖ –í–æ–ø—Ä–æ—Å–æ–≤: ${State.pool.length} ‚Ä¢ –¢–µ–º: ${State.topics.size}${State.penalties ? " ‚Ä¢ –®—Ç—Ä–∞—Ñ–æ–≤: "+State.penalties.length : ""}${State.markup ? " ‚Ä¢ –≠–ª–µ–º–µ–Ω—Ç–æ–≤ —Ä–∞–∑–º–µ—Ç–∫–∏: "+State.markup.length : ""}`);
}

/* =======================
   –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö–ù–û–ü–û–ö
======================= */
function bindMenu(){
  qs("#btnQuickDuel").onclick  = () => startDuel({mode:"quick"});
  qs("#btnTopics").onclick     = () => uiTopics();
  qs("#btnTickets").onclick    = () => uiTickets();
  qs("#btnMarkup").onclick     = () => uiMarkup();
  qs("#btnPenalties").onclick  = () => uiPenalties();
  qs("#btnStats").onclick      = () => toast("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞–∂–µ—Ç—Å—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —á–µ—Ä–µ–∑ Telegram WebApp");
}

/* =======================
   –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–•
======================= */

/** –ó–∞–≥—Ä—É–∂–∞–µ–º 40 –±–∏–ª–µ—Ç–æ–≤: questions/A_B/tickets/–ë–∏–ª–µ—Ç 1.json ... –ë–∏–ª–µ—Ç 40.json */
async function loadTicketsAndBuildTopics(){
  const questions = [];
  for(let i=1;i<=40;i++){
    const file = encodeURIComponent(`–ë–∏–ª–µ—Ç ${i}.json`);
    const path = `questions/A_B/tickets/${file}`;
    try{
      const res = await fetch(path, { cache: "no-store" });
      if(!res.ok) { console.warn("–ë–∏–ª–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω:", path); continue; }
      const data = await res.json();
      const list = Array.isArray(data) ? data : (data.questions || []);
      // –ø—Ä–æ—Å—Ç–∞–≤–∏–º ticket_number, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ –∑–∞–¥–∞–Ω –≤ —Ñ–∞–π–ª–µ
      for(const q of list){ if(q.ticket_number == null) q.ticket_number = i; }
      questions.push(...list);
    }catch(e){ console.warn("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∏–ª–µ—Ç–∞:", path, e); }
  }

  // –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Ä–∞—Å–∫–ª–∞–¥–∫–∞ –ø–æ –±–∏–ª–µ—Ç–∞–º/—Ç–µ–º–∞–º
  const norm = normalizeQuestions(questions);
  for(const q of norm){
    State.pool.push(q);
    // –±–∏–ª–µ—Ç—ã
    if(q.ticket != null){
      const arr = State.byTicket.get(q.ticket) || [];
      arr.push(q); State.byTicket.set(q.ticket, arr);
    }
    // —Ç–µ–º—ã (—Å—Ç—Ä–æ–∏–º –∏–∑ –ø–æ–ª—è topic —Å–∞–º–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞)
    for(const t of q.topics){
      const arr = State.topics.get(t) || [];
      arr.push(q); State.topics.set(t, arr);
    }
  }
}

/** penalties/penalties.json */
async function loadPenalties(){
  try{
    const res = await fetch("penalties/penalties.json", { cache: "no-store" });
    if(!res.ok) return;
    const data = await res.json();
    // –æ–∂–∏–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å–æ —à—Ç—Ä–∞—Ñ–∞–º–∏; –µ—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–Ω–∞—è ‚Äî –ø–æ–¥—Å—Ç—Ä–æ–∏–º—Å—è
    State.penalties = Array.isArray(data) ? data : (data.penalties || data.items || []);
  }catch(e){ /* –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ ‚Äî –æ–∫ */ }
}

/** markup/markup.json */
async function loadMarkup(){
  try{
    const res = await fetch("markup/markup.json", { cache: "no-store" });
    if(!res.ok) return;
    const data = await res.json();
    const arr = Array.isArray(data) ? data : (data.items || data.markup || []);
    // –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ: {id, title, image}
    State.markup = arr.map((x,idx)=>({
      id: x.id ?? idx+1,
      title: x.title || x.name || x.caption || `–≠–ª–µ–º–µ–Ω—Ç ${idx+1}`,
      image: x.image || x.src || x.path || ""
    }));
  }catch(e){ /* –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ ‚Äî –æ–∫ */ }
}

/* –ü—Ä–∏–≤–æ–¥–∏–º –≤—Ö–æ–¥–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∫ –µ–¥–∏–Ω–æ–º—É –≤–∏–¥—É */
function normalizeQuestions(raw){
  const out = [];
  for(const q of raw){
    // –æ—Ç–≤–µ—Ç—ã/–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
    const answers = (q.answers || []).map(a => a.answer_text ?? a.text ?? String(a));
    const correctIndex = (q.answers || []).findIndex(a => a.is_correct === true || a.correct === true || a.isRight === true);
    // —Ç–µ–º–∞ (–æ–¥–Ω–∞ –∏–ª–∏ –º–∞—Å—Å–∏–≤)
    const topics = Array.isArray(q.topic) ? q.topic
                 : (q.topic ? [q.topic] : []);
    out.push({
      id: q.id ?? crypto.randomUUID(),
      question: q.question ?? q.title ?? "–í–æ–ø—Ä–æ—Å",
      answers: answers.length ? answers : ["–î–∞","–ù–µ—Ç","–ù–µ –∑–Ω–∞—é"],
      correctIndex: correctIndex >= 0 ? correctIndex : 0,
      ticket: q.ticket_number ?? q.ticket ?? null,
      topics,
      image: q.image ?? q.img ?? null,
      tip: q.answer_tip ?? q.tip ?? null
    });
  }
  return out;
}

/* =======================
   –í–ò–ö–¢–û–†–ò–ù–ê / –î–£–≠–õ–¨
======================= */
function startDuel({mode, topic=null}){
  const src = topic ? (State.topics.get(topic)||[]) : State.pool;
  if(!src.length){ toast("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"); return; }

  const q = shuffle(src).slice(0, 20); // –≤—Å–µ–≥–¥–∞ 20 –≤–æ–ø—Ä–æ—Å–æ–≤
  State.duel = { mode, topic, i:0, me:0, ai:0, q, timerMs:25000 };
  renderQuestion();
}

function renderQuestion(){
  const d = State.duel, q = d.q[d.i];
  const s = qs("#screen");
  s.innerHTML = `
    <div class="card">
      <div class="meta">
        <div>–í–æ–ø—Ä–æ—Å ${d.i+1}/${d.q.length}${q.ticket!=null ? " ‚Ä¢ –ë–∏–ª–µ—Ç "+escape(q.ticket) : ""}${d.topic ? " ‚Ä¢ –¢–µ–º–∞: "+escape(d.topic) : ""}</div>
        <div class="badge">‚è±Ô∏è 25c</div>
      </div>
      <h3>${escape(q.question)}</h3>
      ${q.image ? `<img class="qimg" src="${resolveQuestionImage(q.image)}" alt=""/>` : ""}
      <div class="grid">
        ${q.answers.map((a,idx)=>`<div class="answer" data-i="${idx}">${escape(a)}</div>`).join("")}
      </div>
      ${q.tip ? `<div class="meta" style="margin-top:8px"><span class="badge">üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞</span><span>${escape(q.tip)}</span></div>` : ""}
      <div class="meta" style="margin-top:10px"><div>–¢—ã: <b>${d.me}</b></div><div>–ò–ò: <b>${d.ai}</b></div></div>
    </div>
  `;

  // –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤
  qsa(".answer").forEach(el => el.onclick = () => finishAnswer(+el.dataset.i));

  function finishAnswer(my){
    const correct = q.correctIndex ?? 0;
    qsa(".answer").forEach((el, i) => {
      el.classList.add(i===correct ? "correct" : (i===my ? "wrong" : ""));
      el.style.pointerEvents = "none";
    });
    if(my === correct){ State.duel.me++; toast("‚úÖ –í–µ—Ä–Ω–æ!"); } else { toast("‚ùå –û—à–∏–±–∫–∞"); }

    // –ò–ò –æ—Ç–≤–µ—á–∞–µ—Ç —Å 88% —Ç–æ—á–Ω–æ—Å—Ç—å—é
    const ai = Math.random() < 0.88 ? correct : pickWrong(correct, q.answers.length);
    if(ai === correct) State.duel.ai++;

    setTimeout(()=> {
      State.duel.i++;
      if(State.duel.i < State.duel.q.length) renderQuestion(); else finishDuel();
    }, 650);
  }
}

function finishDuel(){
  const d = State.duel;
  qs("#screen").innerHTML = `
    <div class="card">
      <h3>${d.me>d.ai ? "üèÜ –ü–æ–±–µ–¥–∞!" : (d.me<d.ai ? "üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–µ" : "ü§ù –ù–∏—á—å—è")}</h3>
      <p style="margin:6px 0 0">–¢—ã: <b>${d.me}</b> ‚Ä¢ –ò–ò: <b>${d.ai}</b> ‚Ä¢ –í—Å–µ–≥–æ: ${d.q.length}</p>
      <div class="grid two" style="margin-top:10px">
        <button class="btn btn-primary" id="again">–ï—â—ë —Ä–∞–∑</button>
        <button class="btn" id="home">–ù–∞ –≥–ª–∞–≤–Ω—É—é</button>
      </div>
    </div>
  `;
  qs("#again").onclick = () => startDuel({mode:d.mode, topic:d.topic});
  qs("#home").onclick  = () => (qs("#screen").innerHTML = "");
}

/* =======================
   UI: –¢–ï–ú–´ / –ë–ò–õ–ï–¢–´ / –†–ê–ó–ú–ï–¢–ö–ê / –®–¢–†–ê–§–´
======================= */
function uiTopics(){
  const list = [...State.topics.keys()].sort((a,b)=> a.localeCompare(b,'ru'));
  if(!list.length){ toast("‚ùå –¢–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"); return; }
  qs("#screen").innerHTML = `
    <div class="card">
      <h3>–í—ã–±–µ—Ä–∏ —Ç–µ–º—É</h3>
      <div class="grid auto" style="margin-top:10px">
        ${list.map(t=>`<div class="answer" data-t="${escape(t)}">${escape(t)}</div>`).join("")}
      </div>
    </div>`;
  qsa("[data-t]").forEach(el => el.onclick = () => startDuel({mode:"topic", topic:el.dataset.t}));
}

function uiTickets(){
  const names = [...new Set(State.pool.map(q => q.ticket).filter(v=>v!=null))].sort((a,b)=>a-b);
  if(!names.length){ toast("‚ùå –ë–∏–ª–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"); return; }
  qs("#screen").innerHTML = `
    <div class="card">
      <h3>–ë–∏–ª–µ—Ç—ã</h3>
      <div class="grid auto" style="margin-top:10px">
        ${names.map(n=>`<div class="answer" data-n="${n}">–ë–∏–ª–µ—Ç ${n}</div>`).join("")}
      </div>
    </div>`;
  qsa("[data-n]").forEach(el => el.onclick = () => startTicket(+el.dataset.n));
}

function startTicket(n){
  const arr = State.byTicket.get(n) || [];
  if(!arr.length){ toast("–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –±–∏–ª–µ—Ç–∞"); return; }
  State.duel = { mode:"ticket", topic:null, i:0, me:0, ai:0, q: shuffle(arr).slice(0,20), timerMs:25000 };
  renderQuestion();
}

function uiMarkup(){
  if(!State.markup || !State.markup.length){ toast("‚ö†Ô∏è –†–∞–∑–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"); return; }
  qs("#screen").innerHTML = `
    <div class="card">
      <h3>–î–æ—Ä–æ–∂–Ω–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞</h3>
      <div class="grid auto" style="margin-top:10px">
        ${State.markup.map(it=>`
          <div class="row">
            <div style="display:flex;gap:10px;align-items:center">
              ${it.image ? `<img src="${resolveMarkupImage(it.image)}" alt="" style="width:64px;height:40px;object-fit:contain;background:#0b1021;border-radius:8px;border:1px solid rgba(255,255,255,.06)"/>` : ""}
              <div>
                <div style="font-weight:700">${escape(it.title)}</div>
                <div style="font-size:12px;color:var(--muted)">ID: ${escape(it.id)}</div>
              </div>
            </div>
          </div>`).join("")}
      </div>
    </div>
  `;
}

function uiPenalties(){
  if(!State.penalties || !State.penalties.length){ toast("‚ö†Ô∏è –®—Ç—Ä–∞—Ñ—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"); return; }
  qs("#screen").innerHTML = `
    <div class="card">
      <h3>–®—Ç—Ä–∞—Ñ—ã</h3>
      <input id="penq" placeholder="–ü–æ–∏—Å–∫ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é..." class="row" style="width:100%;outline:none"/>
      <div id="penlist" class="grid" style="margin-top:10px"></div>
    </div>`;
  const list = qs("#penlist");
  const draw = (q="")=>{
    const f = String(q).trim().toLowerCase();
    const items = State.penalties.filter(p=> !f || String(p.title||p.name||p.description||"").toLowerCase().includes(f));
    list.innerHTML = items.map(p=>`
      <div class="row">
        <div style="display:flex;flex-direction:column;gap:4px;flex:1">
          <div style="font-weight:700">${escape(p.title||p.name||"–ù–∞—Ä—É—à–µ–Ω–∏–µ")}</div>
          ${p.article ? `<div class="badge">üìú –°—Ç–∞—Ç—å—è: ${escape(p.article)}</div>` : ""}
        </div>
        <div class="badge" title="–†–∞–∑–º–µ—Ä —à—Ç—Ä–∞—Ñ–∞">üí∏ ${escape(p.fine||p.amount||p.penalty||"‚Äî")}</div>
      </div>
    `).join("");
  };
  draw();
  qs("#penq").oninput = e => draw(e.target.value);
}

/* =======================
   –£–¢–ò–õ–ò–¢–´
======================= */
const qs  = s => document.querySelector(s);
const qsa = s => [...document.querySelectorAll(s)];
function toast(text){ const t=qs("#toast"); t.innerHTML=`<div class="toast">${escape(text)}</div>`; t.style.opacity=1; setTimeout(()=>t.style.opacity=0,1500); }
function shuffle(a){ return a.map(x=>[Math.random(),x]).sort((a,b)=>a[0]-b[0]).map(x=>x[1]); }
function pickWrong(c,n){ const arr=[...Array(n).keys()].filter(i=>i!==c); return arr[Math.floor(Math.random()*arr.length)]; }
function escape(s){ return String(s).replace(/[&<>"']/g, m=>({"&":"&amp;","<":"&lt;","&gt;":"&gt;","\"":"&quot;","'":"&#39;"}[m])); }

/** –ö–∞—Ä—Ç–∏–Ω–∫–∞ –≤–æ–ø—Ä–æ—Å–∞: –æ–∂–∏–¥–∞–µ—Ç—Å—è –∏–º—è —Ñ–∞–π–ª–∞; –±–µ—Ä—ë–º –∏–∑ images/A_B/ */
function resolveQuestionImage(img){
  let name = String(img).replace(/^\.?\//,'');
  // –µ—Å–ª–∏ —É–∂–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å images/..., –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
  if(/^images\//i.test(name)) return name;
  // –∏–Ω–∞—á–µ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —Ñ–∞–π–ª –ª–µ–∂–∏—Ç –≤ images/A_B/
  return `images/A_B/${name}`;
}

/** –ö–∞—Ä—Ç–∏–Ω–∫–∞ —Ä–∞–∑–º–µ—Ç–∫–∏: svg/png –≤ images/markup/ */
function resolveMarkupImage(img){
  let name = String(img).replace(/^\.?\//,'');
  if(/^images\//i.test(name)) return name;
  return `images/markup/${name}`;
}
