// ===================== –ì–õ–û–ë–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï =====================
const State = {
  pool: [],
  byTicket: new Map(),
  topics: new Map(),
  penalties: null,
  markup: null,
  duel: null,
  lock: false // –±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ —Ç–∞–ø—ã –Ω–∞ –≤—Ä–µ–º—è –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
};

// ===================== –ó–ê–ü–£–°–ö =====================
document.addEventListener("DOMContentLoaded", () => {
  bindMenu();
  bindScreenDelegation();
  boot();
});

async function boot() {
  showLoader(true);
  setLoader(10);
  await loadTicketsAndBuildTopics(p => setLoader(10 + Math.floor(p * 60)));
  await Promise.all([loadPenalties(), loadMarkup()]);
  setLoader(100);
  setTimeout(() => showLoader(false), 400);
  renderHome();
}

// ===================== –õ–û–ê–î–ï–† =====================
function showLoader(v) { qs("#loader").classList.toggle("hidden", !v); }
function setLoader(p) { qs("#loaderBar").style.width = Math.min(100, p) + "%"; }

// ===================== –ú–ï–ù–Æ =====================
function bindMenu() {
  qsa(".menu [data-action]").forEach(btn => {
    btn.addEventListener("click", e => {
      const act = e.currentTarget.dataset.action;
      setActive(e.currentTarget.id);
      if (act === "quick") startDuel({ mode: "quick" });
      if (act === "topics") uiTopics();
      if (act === "tickets") uiTickets();
      if (act === "markup") uiMarkup();
      if (act === "penalties") uiPenalties();
      if (act === "stats") uiStats();
    });
  });
}
function setActive(id){ qsa(".menu .btn").forEach(b=>b.classList.remove("active")); if(id) qs("#"+id)?.classList.add("active"); }

// ===================== –ù–ê–í–ò–ì–ê–¶–ò–Ø =====================
function setView(html) {
  const host = qs("#screen");
  host.scrollTop = 0;
  host.replaceChildren();
  const view = document.createElement("div");
  view.className = "view";
  view.innerHTML = html;
  host.appendChild(view);
}
function renderHome(){
  setActive(null);
  setView(`
    <div class="card">
      <h3>–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º —Å–≤–µ—Ä—Ö—É</h3>
      <p style="margin:.35rem 0 0;color:var(--muted)">–ë—ã—Å—Ç—Ä–∞—è –¥—É—ç–ª—å, –¢–µ–º—ã, –ë–∏–ª–µ—Ç—ã, –†–∞–∑–º–µ—Ç–∫–∞, –®—Ç—Ä–∞—Ñ—ã.</p>
    </div>
  `);
}

// ===================== –î–ï–õ–ï–ì–ò–†–û–í–ê–ù–ò–ï –ö–õ–ò–ö–û–í –í–ù–£–¢–†–ò #screen =====================
function bindScreenDelegation(){
  const screen = qs("#screen");

  // pointerup ‚Äî —Å—Ç–∞–±–∏–ª—å–Ω–æ –¥–ª—è Telegram WebApp
  screen.addEventListener("pointerup", handleScreenTap, { passive:false });
  // –∑–∞–ø–∞—Å–Ω–æ–π click (–µ—Å–ª–∏ pointer —Å–æ–±—ã—Ç–∏—è "—Å—ä–µ–¥—è—Ç—Å—è")
  screen.addEventListener("click", (e)=>{
    if (e.defaultPrevented) return;
    handleScreenTap(e);
  }, { passive:true });
}

function handleScreenTap(e){
  const ans = e.target.closest(".answer");
  if (ans && ans.dataset.i != null){
    e.preventDefault();
    onAnswer(+ans.dataset.i);
    return;
  }
  const ticket = e.target.closest("[data-n]");
  if (ticket){
    e.preventDefault();
    startTicket(+ticket.dataset.n);
    return;
  }
  const topic = e.target.closest("[data-t]");
  if (topic){
    e.preventDefault();
    startDuel({ mode:"topic", topic: topic.dataset.t });
    return;
  }
  if (e.target.id === "again"){ e.preventDefault(); startDuel({ mode: State.duel?.mode || "quick", topic: State.duel?.topic || null }); return; }
  if (e.target.id === "home"){ e.preventDefault(); renderHome(); return; }
  if (e.target.id === "retryMarkup"){ e.preventDefault(); State.markup=null; uiMarkup(); return; }
  if (e.target.id === "retryPen"){ e.preventDefault(); State.penalties=null; uiPenalties(); return; }
}

// ===================== –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• =====================
async function loadTicketsAndBuildTopics(onProgress){
  const TOTAL = 40; let loaded = 0;
  const step = () => onProgress && onProgress(++loaded/TOTAL);

  const raw = [];
  for(let i=1;i<=TOTAL;i++){
    const names = [`–ë–∏–ª–µ—Ç ${i}.json`,`–ë–∏–ª–µ—Ç_${i}.json`,`${i}.json`,`ticket_${i}.json`];
    let found=false;
    for(const name of names){
      try{
        const r = await fetch(`questions/A_B/tickets/${encodeURIComponent(name)}`,{cache:"no-store"});
        if(!r.ok) continue;
        const data = await r.json();
        const arr = Array.isArray(data)?data:(data.questions||data.list||data.data||[]);
        for(const q of arr) q.ticket_number ??= `–ë–∏–ª–µ—Ç ${i}`; // –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–∞–∫ –≤ —Ç–≤–æ–∏—Ö —Ñ–∞–π–ª–∞—Ö
        raw.push(...arr);
        found=true; break;
      }catch{}
    }
    step();
  }

  const norm = normalizeQuestions(raw);
  for(const q of norm){
    State.pool.push(q);
    if(q.ticket!=null){
      const a=State.byTicket.get(q.ticket)||[];
      a.push(q); State.byTicket.set(q.ticket,a);
    }
    for(const t of q.topics){
      const b=State.topics.get(t)||[];
      b.push(q); State.topics.set(t,b);
    }
  }
}

async function loadPenalties(){
  try{
    const r=await fetch("penalties/penalties.json",{cache:"no-store"});
    if(!r.ok) return;
    const j=await r.json();
    State.penalties = Array.isArray(j)?j:(j.penalties||j.items||j.list||j.data||[]);
  }catch{}
}
async function loadMarkup(){
  try{
    const r=await fetch("markup/markup.json",{cache:"no-store"});
    if(!r.ok) return;
    const j=await r.json();
    const arr=Array.isArray(j)?j:(j.markup||j.items||j.list||j.data||[]);
    State.markup = arr.map((x,i)=>({ id:x.id??i+1, title:x.title||x.name||x.caption||`–≠–ª–µ–º–µ–Ω—Ç ${i+1}`, image:x.image||x.src||x.path||"" }));
  }catch{}
}

// ===================== –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø =====================
function normalizeQuestions(raw){
  const out=[];
  for(const q of raw){
    const answersRaw = q.answers || q.variants || q.options || [];
    const answers = answersRaw.map(a=>a?.answer_text??a?.text??a?.title??String(a));

    // 1) –ø—Ä–æ–±—É–µ–º —Ñ–ª–∞–≥ is_correct
    let correctIndex = answersRaw.findIndex(a => a?.is_correct===true || a?.correct===true || a?.isRight===true);

    // 2) –µ—Å–ª–∏ –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º —Å—Ç—Ä–æ–∫—É "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: N"
    if (correctIndex < 0 && typeof q.correct_answer === "string"){
      const m = q.correct_answer.match(/(\d+)/);
      if (m){ const n = parseInt(m[1],10); if (!Number.isNaN(n)) correctIndex = n-1; }
    }
    // 3) –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è
    if (correctIndex < 0 && typeof q.correct === "number") correctIndex = q.correct>0 ? q.correct-1 : q.correct;
    if (correctIndex < 0 && typeof q.correct_index === "number") correctIndex = q.correct_index;
    if (correctIndex < 0 && typeof q.correctIndex === "number") correctIndex = q.correctIndex;
    if (!Number.isInteger(correctIndex) || correctIndex<0 || correctIndex>=answers.length) correctIndex = 0;

    // ticket_number –º–æ–∂–µ—Ç –±—ã—Ç—å "–ë–∏–ª–µ—Ç 1" ‚Üí –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —á–∏—Å–ª–æ
    const tNum = parseTicketNumber(q.ticket_number ?? q.ticket);

    out.push({
      id: q.id ?? cryptoId(),
      question: q.question ?? q.title ?? "–í–æ–ø—Ä–æ—Å",
      answers: answers.length?answers:["–î–∞","–ù–µ—Ç","–ù–µ –∑–Ω–∞—é"],
      correctIndex,
      ticket: tNum,                               // —á–∏—Å–ª–æ–≤–æ–π ID –±–∏–ª–µ—Ç–∞
      topics: toArray(q.topic),
      image: normalizeImagePath(q.image ?? q.img ?? null),
      tip: q.answer_tip ?? q.tip ?? null
    });
  }
  return out;
}

function parseTicketNumber(val){
  if (val == null) return null;
  if (typeof val === "number") return val;
  const s = String(val);
  const m = s.match(/(\d+)/);
  return m ? parseInt(m[1],10) : null;
}
function toArray(x){ return Array.isArray(x) ? x : (x ? [x] : []); }
function cryptoId(){
  if (crypto?.randomUUID) return crypto.randomUUID();
  return 'id-' + Math.random().toString(36).slice(2);
}

// ===================== –≠–ö–†–ê–ù–´ =====================
function uiTopics(){
  const list=[...State.topics.keys()].sort((a,b)=>a.localeCompare(b,'ru'));
  if(!list.length){ setView(`<div class="card"><h3>–¢–µ–º—ã</h3><p>‚ùå –¢–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p></div>`); return; }
  setView(`
    <div class="card"><h3>–¢–µ–º—ã</h3></div>
    <div class="card"><div class="grid auto">
      ${list.map(t=>`<button type="button" class="answer" data-t="${esc(t)}">${esc(t)}</button>`).join("")}
    </div></div>
  `);
}

function uiTickets(){
  const ids=[...State.byTicket.keys()].sort((a,b)=>a-b);
  if(!ids.length){ setView(`<div class="card"><h3>–ë–∏–ª–µ—Ç—ã</h3><p>‚ùå –ë–∏–ª–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p></div>`); return; }
  setView(`
    <div class="card"><h3>–ë–∏–ª–µ—Ç—ã</h3></div>
    <div class="card"><div class="grid auto">
      ${ids.map(n=>`<button type="button" class="answer" data-n="${n}">–ë–∏–ª–µ—Ç ${n}</button>`).join("")}
    </div></div>
  `);
}

function uiMarkup(){
  if(!State.markup){
    setView(`<div class="card"><h3>–†–∞–∑–º–µ—Ç–∫–∞</h3><p>‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º‚Ä¶</p></div>`);
    loadMarkup().then(()=>uiMarkup()); return;
  }
  if(!State.markup.length){
    setView(`<div class="card"><h3>–†–∞–∑–º–µ—Ç–∫–∞</h3><p>‚ö†Ô∏è –†–∞–∑–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</p><button class="btn" id="retryMarkup">üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å</button></div>`);
    return;
  }
  setView(`
    <div class="card"><h3>–î–æ—Ä–æ–∂–Ω–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞</h3></div>
    <div class="card"><div class="grid auto">
      ${State.markup.map(it=>`
        <div class="row">
          ${it.image?`<img src="${imgMarkup(it.image)}" alt="" style="width:84px;height:54px;object-fit:contain;background:#0b1021;border-radius:10px;border:1px solid rgba(255,255,255,.06)"/>`:""}
          <div style="font-weight:800">${esc(it.title)}</div>
          <div class="badge">ID: ${esc(it.id)}</div>
        </div>`).join("")}
    </div></div>
  `);
}

function uiPenalties(){
  if(!State.penalties){
    setView(`<div class="card"><h3>–®—Ç—Ä–∞—Ñ—ã</h3><p>‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º‚Ä¶</p></div>`);
    loadPenalties().then(()=>uiPenalties()); return;
  }
  if(!State.penalties.length){
    setView(`<div class="card"><h3>–®—Ç—Ä–∞—Ñ—ã</h3><p>‚ö†Ô∏è –®—Ç—Ä–∞—Ñ—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p><button class="btn" id="retryPen">üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å</button></div>`);
    return;
  }
  setView(`
    <div class="card"><h3>–®—Ç—Ä–∞—Ñ—ã</h3></div>
    <div class="card">
      <input id="penq" placeholder="–ü–æ–∏—Å–∫ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é..." class="row" style="width:100%;outline:none;margin-bottom:10px"/>
      <div id="penlist" class="grid"></div>
    </div>
  `);
  const list=qs("#penlist");
  const draw=q=>{
    const f=String(q||"").toLowerCase();
    const items=State.penalties.filter(p=>!f||String(p.title||p.name||p.description||"").toLowerCase().includes(f));
    list.innerHTML=items.map(p=>`
      <div class="row">
        <div style="display:flex;flex-direction:column;gap:4px;flex:1;min-width:0">
          <div style="font-weight:800">${esc(p.title||p.name||"–ù–∞—Ä—É—à–µ–Ω–∏–µ")}</div>
          ${p.article?`<div class="badge">üìú –°—Ç–∞—Ç—å—è: ${esc(p.article)}</div>`:""}
        </div>
        <div class="badge">üí∏ ${esc(p.fine||p.amount||p.penalty||"‚Äî")}</div>
      </div>`).join("");
  };
  draw(""); qs("#penq").oninput=e=>draw(e.target.value);
}

function uiStats(){
  setView(`<div class="card"><h3>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3><p>–°–∫–æ—Ä–æ: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥—É—ç–ª–µ–π –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ç–µ–º–∞–º.</p></div>`);
}

// ===================== –î–£–≠–õ–¨ / –í–ò–ö–¢–û–†–ò–ù–ê =====================
function startDuel({mode,topic=null}){
  const src = topic ? (State.topics.get(topic)||[]) : State.pool;
  if(!src.length){ setView(`<div class="card"><h3>–î—É—ç–ª—å</h3><p>‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p></div>`); return; }
  const q = shuffle(src).slice(0,20);
  State.duel = { mode, topic, i:0, me:0, ai:0, q };
  renderQuestion();
}

function startTicket(n){
  const arr = State.byTicket.get(n) || [];
  if(!arr.length){ setView(`<div class="card"><h3>–ë–∏–ª–µ—Ç ${n}</h3><p>‚ö†Ô∏è –í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p></div>`); return; }
  const q = arr.length>20 ? shuffle(arr).slice(0,20) : arr.slice(0,20);
  State.duel = { mode:"ticket", topic:null, i:0, me:0, ai:0, q };
  renderQuestion();
}

function renderQuestion(){
  const d = State.duel, q = d.q[d.i];
  setView(`
    <div class="card">
      <div class="meta">
        <div>–í–æ–ø—Ä–æ—Å ${d.i+1}/${d.q.length}${q.ticket!=null?` ‚Ä¢ –ë–∏–ª–µ—Ç ${esc(q.ticket)}`:""}${d.topic?` ‚Ä¢ –¢–µ–º–∞: ${esc(d.topic)}`:""}</div>
        <div class="badge">‚è±Ô∏è 25—Å</div>
      </div>
      <h3>${esc(q.question)}</h3>
      ${q.image?`<img class="qimg" src="${imgQuestion(q.image)}" alt=""/>`:""}
      <div class="grid">
        ${q.answers.map((a,i)=>`<button type="button" class="answer" data-i="${i}">${esc(a)}</button>`).join("")}
      </div>
      <div id="tip" class="meta" style="margin-top:10px;display:none">
        <span class="badge">üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞</span><span>${esc(q.tip||"–ü–æ–¥—Å–∫–∞–∑–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")}</span>
      </div>
      <div class="meta" style="margin-top:10px"><div>–¢—ã: <b>${d.me}</b></div><div>–ò–ò: <b>${d.ai}</b></div></div>
    </div>
  `);
}

function onAnswer(idx){
  if(State.lock) return;
  const d=State.duel; if(!d) return;
  const q=d.q[d.i]; const correct=q.correctIndex??0;

  State.lock = true;

  const items = qsa(".answer");
  items.forEach((el,i)=>{
    el.disabled = true;
    el.classList.add(i===correct?"correct":(i===idx?"wrong":""));
  });

  if(idx===correct){ d.me++; toast("‚úÖ –í–µ—Ä–Ω–æ!"); }
  else{ toast("‚ùå –û—à–∏–±–∫–∞"); const tip=qs("#tip"); if(tip) tip.style.display="flex"; }

  // –∏–º–∏—Ç–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ ¬´–ò–ò¬ª
  const ai = Math.random()<0.85 ? correct : pickWrong(correct, items.length);
  if(ai===correct) d.ai++;

  // –ù–∞–¥—ë–∂–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ ¬´–Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É¬ª —Å –≤–æ–ø—Ä–æ—Å–æ–º
  requestAnimationFrame(()=>{
    setTimeout(()=>{
      d.i++;
      State.lock = false;
      if(d.i<d.q.length) renderQuestion();
      else finishDuel();
    }, 900);
  });
}

function finishDuel(){
  const d=State.duel;
  setView(`
    <div class="card">
      <h3>${d.me>d.ai?"üèÜ –ü–æ–±–µ–¥–∞!":(d.me<d.ai?"üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–µ":"ü§ù –ù–∏—á—å—è")}</h3>
      <p style="margin:.35rem 0 0">–¢—ã: <b>${d.me}</b> ‚Ä¢ –ò–ò: <b>${d.ai}</b> ‚Ä¢ –í—Å–µ–≥–æ: ${d.q.length}</p>
      <div class="grid two" style="margin-top:10px">
        <button class="btn btn-primary" id="again">–ï—â—ë —Ä–∞–∑</button>
        <button class="btn" id="home">–ù–∞ –≥–ª–∞–≤–Ω—É—é</button>
      </div>
    </div>
  `);
}

// ===================== –£–¢–ò–õ–ò–¢–´ =====================
const qs  = s => document.querySelector(s);
const qsa = s => [...document.querySelectorAll(s)];
function toast(text){ const t=qs("#toast"); t.innerHTML=`<div class="toast">${esc(text)}</div>`; t.style.opacity=1; setTimeout(()=>t.style.opacity=0,1400); }
function shuffle(a){ return a.map(x=>[Math.random(),x]).sort((a,b)=>a[0]-b[0]).map(x=>x[1]); }
function pickWrong(c,n){ const arr=[...Array(n).keys()].filter(i=>i!==c); return arr[Math.floor(Math.random()*arr.length)]; }
function esc(s){ return String(s).replace(/[&<>"']/g, m=>({"&":"&amp;","<":"&lt;","&gt;":"&gt;","\"":"&quot;","'":"&#39;"}[m])); }

/* –ø—É—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π */
function normalizeImagePath(img){
  if(!img) return null;
  let name = String(img).trim();

  // —É–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ "./"
  name = name.replace(/^\.\/+/, "");

  // –µ—Å–ª–∏ —É–∂–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å images/ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
  if(/^images\//i.test(name)) return name;

  // –µ—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å A_B/ ‚Üí —ç—Ç–æ –∫–∞—Ç–∞–ª–æ–≥ –≤–Ω—É—Ç—Ä–∏ images
  if(/^A_B\//i.test(name)) return "images/" + name;

  // –¥–µ—Ñ–æ–ª—Ç: –∫–ª–∞–¥—ë–º –≤ images/A_B
  return "images/A_B/" + name;
}
function imgQuestion(img){ return normalizeImagePath(img) || ""; }
function imgMarkup(img){
  if(!img) return "";
  let name = String(img).replace(/^\.\/+/, "");
  if(/^images\//i.test(name)) return name;
  if(/^markup\//i.test(name)) return "images/" + name;
  return "images/markup/" + name;
}
