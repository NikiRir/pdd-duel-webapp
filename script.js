let tg = window.Telegram.WebApp;
tg.expand();
tg.enableClosingConfirmation();

let currentQuestions = [];
let currentQuestionIndex = 0;
let userScore = 0;
let timerInterval = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', function() {
    console.log("üöÄ WebApp –∑–∞–≥—Ä—É–∂–µ–Ω!");
    initApp();
});

function initApp() {
    loadTickets();
    console.log("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ");
}

// –ù–∞–≤–∏–≥–∞—Ü–∏—è
function showScreen(screenId) {
    console.log(`üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω: ${screenId}`);
    document.querySelectorAll('.screen').forEach(screen => {
        screen.classList.remove('active');
    });
    document.getElementById(screenId).classList.add('active');
}

function backToMain() {
    showScreen('mainScreen');
}

function backToDuelModes() {
    showScreen('duelModeScreen');
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –±–∏–ª–µ—Ç–æ–≤
function loadTickets() {
    const grid = document.getElementById('ticketGrid');
    grid.innerHTML = '';
    
    for (let i = 1; i <= 20; i++) {
        const button = document.createElement('button');
        button.className = 'ticket-btn';
        button.textContent = i;
        button.onclick = () => createDuel('ticket', 5, i);
        grid.appendChild(button);
    }
    console.log("‚úÖ –ë–∏–ª–µ—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã");
}

function showTicketSelection() {
    showScreen('ticketScreen');
}

// –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function startDuel() {
    console.log("üéÆ –ù–∞—á–∞–ª–æ –¥—É—ç–ª–∏");
    showScreen('duelModeScreen');
}

function startTraining() {
    console.log("üìö –ù–∞—á–∞–ª–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏");
    startGameSession('training', 'random', 5);
}

function createDuel(mode, questionCount, ticketNumber = null) {
    console.log(`üéØ –°–æ–∑–¥–∞–Ω–∏–µ –¥—É—ç–ª–∏: ${mode}, –≤–æ–ø—Ä–æ—Å–æ–≤: ${questionCount}, –±–∏–ª–µ—Ç: ${ticketNumber}`);
    
    const duelId = Math.random().toString(36).substr(2, 6).toUpperCase();
    document.getElementById('duelId').textContent = duelId;
    showScreen('waitingScreen');
    
    // –ò–º–∏—Ç–∞—Ü–∏—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
    setTimeout(() => {
        startGameSession('duel', mode, questionCount, ticketNumber, duelId);
    }, 3000);
}

function copyDuelId() {
    const duelId = document.getElementById('duelId').textContent;
    navigator.clipboard.writeText(duelId);
    
    if (tg.showPopup) {
        tg.showPopup({
            title: '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!',
            message: 'ID –¥—É—ç–ª–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞'
        });
    } else {
        alert('ID —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: ' + duelId);
    }
}

function cancelDuel() {
    console.log("‚ùå –î—É—ç–ª—å –æ—Ç–º–µ–Ω–µ–Ω–∞");
    showScreen('duelModeScreen');
}

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —Ç–æ–ø
function showStats() {
    console.log("üìä –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏");
    
    const statsText = `
üìä –í–ê–®–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê:

üéÆ –°—ã–≥—Ä–∞–Ω–æ –¥—É—ç–ª–µ–π: 15
‚úÖ –ü–æ–±–µ–¥: 10
‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏–π: 5
üìà –í–∏–Ω—Ä–µ–π—Ç: 67%

üéØ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: 85%
‚≠ê –†–µ–π—Ç–∏–Ω–≥: 1250
üèÖ –ü–æ–∑–∏—Ü–∏—è –≤ —Ç–æ–ø–µ: #3

–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™
    `;
    
    if (tg.showPopup) {
        tg.showPopup({
            title: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
            message: statsText
        });
    } else {
        alert(statsText);
    }
}

function showTop() {
    console.log("üèÜ –ü–æ–∫–∞–∑ —Ç–æ–ø–∞");
    
    const topText = `
üèÜ –¢–û–ü –ò–ì–†–û–ö–û–í:

ü•á 1. –ê–ª–µ–∫—Å–µ–π - 1500 ‚≠ê (25 –ø–æ–±–µ–¥)
ü•à 2. –ú–∞—Ä–∏—è - 1420 ‚≠ê (22 –ø–æ–±–µ–¥—ã)  
ü•â 3. –í–´ - 1250 ‚≠ê (10 –ø–æ–±–µ–¥) üëà
üî∏ 4. –î–º–∏—Ç—Ä–∏–π - 1180 ‚≠ê (8 –ø–æ–±–µ–¥)
üî∏ 5. –ê–Ω–Ω–∞ - 1150 ‚≠ê (7 –ø–æ–±–µ–¥)

–°—Ä–∞–∂–∞–π—Ç–µ—Å—å –∑–∞ –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ! ‚öîÔ∏è
    `;
    
    if (tg.showPopup) {
        tg.showPopup({
            title: 'üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤',
            message: topText
        });
    } else {
        alert(topText);
    }
}

// –ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞
function startGameSession(type, mode, questionCount, ticketNumber = null, duelId = null) {
    console.log(`üé≤ –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã: ${type}, ${mode}, ${questionCount} –≤–æ–ø—Ä–æ—Å–æ–≤`);
    
    let questions = [];
    
    if (mode === 'ticket' && ticketNumber) {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∑–∞ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –±–∏–ª–µ—Ç–∞
        questions = generateMockQuestions(questionCount);
    } else {
        questions = generateMockQuestions(questionCount);
    }
    
    currentQuestions = questions;
    currentQuestionIndex = 0;
    userScore = 0;
    
    showScreen('questionScreen');
    displayQuestion();
}

function generateMockQuestions(count) {
    console.log(`üé≤ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ${count} –≤–æ–ø—Ä–æ—Å–æ–≤`);
    
    const questions = [];
    const questionTemplates = [
        "–†–∞–∑—Ä–µ—à–µ–Ω–æ –ª–∏ –í–∞–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞–∑–≤–æ—Ä–æ—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –º–µ—Å—Ç–µ?",
        "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —ç—Ç–æ—Ç –¥–æ—Ä–æ–∂–Ω—ã–π –∑–Ω–∞–∫?",
        "–° –∫–∞–∫–æ–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –¥–≤–∏–∂–µ–Ω–∏–µ –≤ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–º –ø—É–Ω–∫—Ç–µ?",
        "–û–±—è–∑–∞–Ω—ã –ª–∏ –í—ã –≤–∫–ª—é—á–∏—Ç—å —É–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ–≤–æ—Ä–æ—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—Ç—Ä–æ–µ–Ω–∏–∏?",
        "–ö—Ç–æ –∏–º–µ–µ—Ç –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –Ω–∞ –Ω–µ—Ä–µ–≥—É–ª–∏—Ä—É–µ–º–æ–º –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–µ?",
        "–†–∞–∑—Ä–µ—à–µ–Ω–∞ –ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –º–µ—Å—Ç–µ?",
        "–ß—Ç–æ –¥–æ–ª–∂–µ–Ω —Å–¥–µ–ª–∞—Ç—å –≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∫ –ø–µ—à–µ—Ö–æ–¥–Ω–æ–º—É –ø–µ—Ä–µ—Ö–æ–¥—É?",
        "–†–∞–∑—Ä–µ—à–µ–Ω–æ –ª–∏ –í–∞–º –æ–±–æ–≥–Ω–∞—Ç—å –≥—Ä—É–∑–æ–≤–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å?",
        "–ö–∞–∫–æ–π –∑–Ω–∞–∫ –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ –Ω–∞—á–∞–ª–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞?",
        "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –º–∏–≥–∞—é—â–∏–π –∑–µ–ª–µ–Ω—ã–π —Å–∏–≥–Ω–∞–ª —Å–≤–µ—Ç–æ—Ñ–æ—Ä–∞?"
    ];
    
    for (let i = 1; i <= count; i++) {
        const template = questionTemplates[i % questionTemplates.length];
        
        questions.push({
            id: i,
            text: `${template} (–í–æ–ø—Ä–æ—Å ${i})`,
            options: [
                { id: 1, text: "–ü–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞" },
                { id: 2, text: "–í—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞" },
                { id: 3, text: "–¢—Ä–µ—Ç–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞" }
            ],
            correctAnswer: Math.floor(Math.random() * 3) + 1
        });
    }
    
    return questions;
}

function displayQuestion() {
    const question = currentQuestions[currentQuestionIndex];
    if (!question) {
        console.log("‚ùå –ù–µ—Ç –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è");
        return;
    }
    
    console.log(`üìù –í–æ–ø—Ä–æ—Å ${currentQuestionIndex + 1}/${currentQuestions.length}`);
    
    // –ü—Ä–æ–≥—Ä–µ—Å—Å
    const progress = ((currentQuestionIndex) / currentQuestions.length) * 100;
    document.getElementById('progressFill').style.width = progress + '%';
    
    // –ù–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –∏ —Ç–∞–π–º–µ—Ä
    document.getElementById('questionNumber').textContent = 
        `${currentQuestionIndex + 1}/${currentQuestions.length}`;
    
    // –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
    document.getElementById('questionText').textContent = question.text;
    
    // –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    const optionsContainer = document.getElementById('optionsContainer');
    optionsContainer.innerHTML = '';
    
    question.options.forEach(option => {
        const button = document.createElement('button');
        button.className = 'option-btn';
        button.textContent = option.text;
        button.onclick = () => selectAnswer(option.id);
        optionsContainer.appendChild(button);
    });
    
    // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
    startTimer(30);
}

function startTimer(seconds) {
    let timeLeft = seconds;
    const timerElement = document.getElementById('timer');
    
    if (timerInterval) {
        clearInterval(timerInterval);
    }
    
    timerInterval = setInterval(() => {
        timeLeft--;
        timerElement.textContent = timeLeft + 's';
        
        if (timeLeft <= 0) {
            clearInterval(timerInterval);
            handleTimeUp();
        }
    }, 1000);
}

function selectAnswer(optionId) {
    console.log(`üéØ –í—ã–±—Ä–∞–Ω –æ—Ç–≤–µ—Ç: ${optionId}`);
    
    if (timerInterval) {
        clearInterval(timerInterval);
    }
    
    const question = currentQuestions[currentQuestionIndex];
    const isCorrect = optionId === question.correctAnswer;
    
    // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ/–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ
    const options = document.querySelectorAll('.option-btn');
    options.forEach(btn => {
        btn.disabled = true; // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
        
        const btnText = btn.textContent;
        const correspondingOption = question.options.find(opt => opt.text === btnText);
        
        if (correspondingOption) {
            if (correspondingOption.id === question.correctAnswer) {
                btn.classList.add('correct');
            } else if (correspondingOption.id === optionId && !isCorrect) {
                btn.classList.add('incorrect');
            }
        }
    });
    
    if (isCorrect) {
        userScore++;
        console.log("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!");
    } else {
        console.log("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!");
    }
    
    // –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        currentQuestionIndex++;
        if (currentQuestionIndex < currentQuestions.length) {
            displayQuestion();
        } else {
            showResults();
        }
    }, 2000);
}

function handleTimeUp() {
    console.log("‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ!");
    
    currentQuestionIndex++;
    if (currentQuestionIndex < currentQuestions.length) {
        displayQuestion();
    } else {
        showResults();
    }
}

function showResults() {
    console.log(`üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: ${userScore}/${currentQuestions.length}`);
    
    document.getElementById('playerScore').textContent = userScore;
    document.getElementById('opponentScore').textContent = Math.floor(Math.random() * currentQuestions.length);
    
    const resultMessage = document.getElementById('resultMessage');
    if (userScore >= currentQuestions.length * 0.8) {
        resultMessage.textContent = 'üéâ –ë–õ–ï–°–¢–Ø–©–ê–Ø –ü–û–ë–ï–î–ê! –¢–´ –ì–ï–ù–ò–ô –ü–î–î! üéâ';
    } else if (userScore >= currentQuestions.length * 0.5) {
        resultMessage.textContent = 'üëç –•–û–†–û–®–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –ú–û–ñ–ù–û –õ–£–ß–®–ï! üí™';
    } else {
        resultMessage.textContent = 'üòî –ü–û–†–ê –¢–†–ï–ù–ò–†–û–í–ê–¢–¨–°–Ø! –ù–ï –°–î–ê–í–ê–ô–°–Ø! üìö';
    }
    
    showScreen('resultsScreen');
}

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–µ–±–∞–≥–∞
console.log("üîß Debug: –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã");
