let tg = window.Telegram.WebApp;
tg.expand();
tg.enableClosingConfirmation();

let currentQuestions = [];
let currentQuestionIndex = 0;
let userScore = 0;
let timerInterval = null;
let currentTimeLeft = 30;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', function() {
    console.log("üöÄ WebApp –∑–∞–≥—Ä—É–∂–µ–Ω!");
    initApp();
});

function initApp() {
    loadTickets();
    loadTopics();
    createParticles();
    console.log("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ");
}

// –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Å—Ç–∏—Ü –¥–ª—è —Ñ–æ–Ω–∞
function createParticles() {
    const container = document.getElementById('particles');
    if (!container) return;
    
    for (let i = 0; i < 20; i++) {
        const particle = document.createElement('div');
        particle.className = 'particle';
        particle.style.cssText = `
            position: absolute;
            width: ${Math.random() * 3 + 1}px;
            height: ${Math.random() * 3 + 1}px;
            background: rgba(255, 255, 255, ${Math.random() * 0.3 + 0.1});
            border-radius: 50%;
            top: ${Math.random() * 100}%;
            left: ${Math.random() * 100}%;
            animation: particleFloat ${Math.random() * 20 + 10}s infinite linear;
        `;
        container.appendChild(particle);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —á–∞—Å—Ç–∏—Ü
    const style = document.createElement('style');
    style.textContent = `
        @keyframes particleFloat {
            0% { transform: translateY(100vh) translateX(0); }
            100% { transform: translateY(-100px) translateX(${Math.random() * 100 - 50}px); }
        }
    `;
    document.head.appendChild(style);
}

// –ù–∞–≤–∏–≥–∞—Ü–∏—è
function showScreen(screenId) {
    console.log(`üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω: ${screenId}`);
    document.querySelectorAll('.screen').forEach(screen => {
        screen.classList.remove('active');
    });
    document.getElementById(screenId).classList.add('active');
}

function backToMain() {
    showScreen('mainScreen');
}

function backToDuelModes() {
    showScreen('duelModeScreen');
}

function backToTopics() {
    showScreen('topicsScreen');
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –±–∏–ª–µ—Ç–æ–≤
function loadTickets() {
    const grid = document.getElementById('ticketGrid');
    if (!grid) return;
    
    grid.innerHTML = '';
    
    for (let i = 1; i <= 40; i++) {
        const button = document.createElement('button');
        button.className = 'ticket-btn';
        button.textContent = i;
        button.onclick = () => startTicketDuel(i);
        grid.appendChild(button);
    }
    console.log("‚úÖ –ë–∏–ª–µ—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã");
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–º
function loadTopics() {
    const container = document.getElementById('topicsContainer');
    if (!container) return;
    
    const topics = [
        { id: 'road_signs', name: 'üö∏ –î–æ—Ä–æ–∂–Ω—ã–µ –∑–Ω–∞–∫–∏', description: '–í—Å–µ –≤–∏–¥—ã –¥–æ—Ä–æ–∂–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ –∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è', questions: 20 },
        { id: 'markings', name: 'üìè –î–æ—Ä–æ–∂–Ω–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞', description: '–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞', questions: 15 },
        { id: 'intersections', name: 'üîÑ –ü—Ä–æ–µ–∑–¥ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–æ–≤', description: '–ù–µ—Ä–µ–≥—É–ª–∏—Ä—É–µ–º—ã–µ –∏ —Ä–µ–≥—É–ª–∏—Ä—É–µ–º—ã–µ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–∏', questions: 25 },
        { id: 'overtaking', name: '‚ö° –û–±–≥–æ–Ω –∏ –æ–ø–µ—Ä–µ–∂–µ–Ω–∏–µ', description: '–ü—Ä–∞–≤–∏–ª–∞ –æ–±–≥–æ–Ω–∞, –≤—Å—Ç—Ä–µ—á–Ω–æ–≥–æ —Ä–∞–∑—ä–µ–∑–¥–∞', questions: 18 },
        { id: 'parking', name: 'üÖøÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —Å—Ç–æ—è–Ω–∫–∞', description: '–ü—Ä–∞–≤–∏–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ —Å—Ç–æ—è–Ω–∫–∏ –¢–°', questions: 16 },
        { id: 'pedestrians', name: 'üö∂ –ü–µ—à–µ—Ö–æ–¥–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã', description: '–ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–µ–∑–¥–∞ –ø–µ—à–µ—Ö–æ–¥–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤', questions: 12 }
    ];
    
    container.innerHTML = '';
    
    topics.forEach(topic => {
        const topicElement = document.createElement('div');
        topicElement.className = 'topic-item';
        topicElement.onclick = () => showTopic(topic);
        topicElement.innerHTML = `
            <div class="topic-name">${topic.name}</div>
            <div class="topic-description">${topic.description}</div>
            <div class="topic-stats">${topic.questions} –≤–æ–ø—Ä–æ—Å–æ–≤</div>
        `;
        container.appendChild(topicElement);
    });
    
    console.log("‚úÖ –¢–µ–º—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã");
}

// –ü–æ–∫–∞–∑ —Ç–µ–º—ã
function showTopic(topic) {
    document.getElementById('topicTitle').textContent = topic.name;
    document.getElementById('topicDescription').textContent = topic.description;
    document.getElementById('topicQuestionsCount').textContent = topic.questions;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É –≤ data-–∞—Ç—Ä–∏–±—É—Ç–∞—Ö –∫–Ω–æ–ø–æ–∫
    const practiceBtn = document.querySelector('.btn-topic-action:first-child');
    const duelBtn = document.querySelector('.btn-topic-action:last-child');
    
    practiceBtn.setAttribute('data-topic', topic.id);
    duelBtn.setAttribute('data-topic', topic.id);
    
    showScreen('topicScreen');
}

// –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function showDuelModes() {
    showScreen('duelModeScreen');
}

function showTopics() {
    showScreen('topicsScreen');
}

function showTicketSelection() {
    showScreen('ticketScreen');
}

function startQuickDuel() {
    console.log("üéØ –ë—ã—Å—Ç—Ä–∞—è –¥—É—ç–ª—å");
    showScreen('matchmakingScreen');
    
    // –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
    setTimeout(() => {
        document.getElementById('searchStatus').textContent = '–°–æ–ø–µ—Ä–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò–≥—Ä–∞–µ–º —Å –ò–ò-–±–æ—Ç–æ–º!';
        
        setTimeout(() => {
            startAIDuel();
        }, 2000);
    }, 3000);
}

function startTicketDuel(ticketNumber) {
    console.log(`üé´ –î—É—ç–ª—å –ø–æ –±–∏–ª–µ—Ç—É ${ticketNumber}`);
    startGameSession('duel', 'ticket', 5, ticketNumber);
}

function startTopicPractice() {
    const topic = document.querySelector('.btn-topic-action:first-child').getAttribute('data-topic');
    console.log(`üìö –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–µ–º–µ: ${topic}`);
    startGameSession('training', 'topic', 10, topic);
}

function startTopicDuel() {
    const topic = document.querySelector('.btn-topic-action:last-child').getAttribute('data-topic');
    console.log(`‚öîÔ∏è –î—É—ç–ª—å –ø–æ —Ç–µ–º–µ: ${topic}`);
    startGameSession('duel', 'topic', 5, topic);
}

function startAIDuel() {
    showScreen('aiDuelScreen');
}

function startAIDuelGame() {
    const questionCount = parseInt(document.getElementById('questionCount').value);
    const difficulty = parseFloat(document.getElementById('aiDifficulty').value);
    
    console.log(`ü§ñ –î—É—ç–ª—å —Å –ò–ò: ${questionCount} –≤–æ–ø—Ä–æ—Å–æ–≤, —Å–ª–æ–∂–Ω–æ—Å—Ç—å ${difficulty}`);
    startGameSession('ai_duel', 'random', questionCount, null, difficulty);
}

function cancelMatchmaking() {
    console.log("‚ùå –û—Ç–º–µ–Ω–∞ –ø–æ–∏—Å–∫–∞");
    showScreen('mainScreen');
}

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
function showStats() {
    console.log("üìä –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏");
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –±–æ—Ç—É –∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    const statsText = `
üìä –í–ê–®–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê:

üéÆ –°—ã–≥—Ä–∞–Ω–æ –¥—É—ç–ª–µ–π: 15
‚úÖ –ü–æ–±–µ–¥: 10
‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏–π: 5
üìà –í–∏–Ω—Ä–µ–π—Ç: 67%

üéØ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: 85%
‚≠ê –†–µ–π—Ç–∏–Ω–≥: 1250
üèÖ –ü–æ–∑–∏—Ü–∏—è –≤ —Ç–æ–ø–µ: #3

–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™
    `;
    
    if (tg.showPopup) {
        tg.showPopup({
            title: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
            message: statsText
        });
    } else {
        alert(statsText);
    }
}

// –ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞
function startGameSession(type, mode, questionCount, specific = null, difficulty = null) {
    console.log(`üé≤ –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã: ${type}, ${mode}, ${questionCount} –≤–æ–ø—Ä–æ—Å–æ–≤`);
    
    let questions = [];
    
    if (mode === 'ticket' && specific) {
        questions = generateTicketQuestions(questionCount, specific);
    } else if (mode === 'topic' && specific) {
        questions = generateTopicQuestions(questionCount, specific);
    } else {
        questions = generateRandomQuestions(questionCount);
    }
    
    currentQuestions = questions;
    currentQuestionIndex = 0;
    userScore = 0;
    currentTimeLeft = 30;
    
    showScreen('questionScreen');
    displayQuestion();
}

function generateTicketQuestions(count, ticketNumber) {
    console.log(`üé≤ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ${count} –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –±–∏–ª–µ—Ç–∞ ${ticketNumber}`);
    return generateMockQuestions(count, `–ë–∏–ª–µ—Ç ${ticketNumber}`);
}

function generateTopicQuestions(count, topic) {
    console.log(`üé≤ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ${count} –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ç–µ–º–µ ${topic}`);
    return generateMockQuestions(count, `–¢–µ–º–∞ ${topic}`);
}

function generateRandomQuestions(count) {
    console.log(`üé≤ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ${count} —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤`);
    return generateMockQuestions(count, '–°–ª—É—á–∞–π–Ω—ã–µ');
}

function generateMockQuestions(count, source = '') {
    const questions = [];
    const questionTemplates = [
        "–†–∞–∑—Ä–µ—à–µ–Ω–æ –ª–∏ –í–∞–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞–∑–≤–æ—Ä–æ—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –º–µ—Å—Ç–µ?",
        "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —ç—Ç–æ—Ç –¥–æ—Ä–æ–∂–Ω—ã–π –∑–Ω–∞–∫?",
        "–° –∫–∞–∫–æ–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –¥–≤–∏–∂–µ–Ω–∏–µ –≤ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–º –ø—É–Ω–∫—Ç–µ?",
        "–û–±—è–∑–∞–Ω—ã –ª–∏ –í—ã –≤–∫–ª—é—á–∏—Ç—å —É–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ–≤–æ—Ä–æ—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—Ç—Ä–æ–µ–Ω–∏–∏?",
        "–ö—Ç–æ –∏–º–µ–µ—Ç –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –Ω–∞ –Ω–µ—Ä–µ–≥—É–ª–∏—Ä—É–µ–º–æ–º –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–µ?",
        "–†–∞–∑—Ä–µ—à–µ–Ω–∞ –ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –º–µ—Å—Ç–µ?",
        "–ß—Ç–æ –¥–æ–ª–∂–µ–Ω —Å–¥–µ–ª–∞—Ç—å –≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∫ –ø–µ—à–µ—Ö–æ–¥–Ω–æ–º—É –ø–µ—Ä–µ—Ö–æ–¥—É?",
        "–†–∞–∑—Ä–µ—à–µ–Ω–æ –ª–∏ –í–∞–º –æ–±–æ–≥–Ω–∞—Ç—å –≥—Ä—É–∑–æ–≤–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å?",
        "–ö–∞–∫–æ–π –∑–Ω–∞–∫ –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ –Ω–∞—á–∞–ª–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞?",
        "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –º–∏–≥–∞—é—â–∏–π –∑–µ–ª–µ–Ω—ã–π —Å–∏–≥–Ω–∞–ª —Å–≤–µ—Ç–æ—Ñ–æ—Ä–∞?"
    ];
    
    const answerTemplates = [
        ["–î–∞, —Ä–∞–∑—Ä–µ—à–µ–Ω–æ", "–†–∞–∑—Ä–µ—à–µ–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –¥–æ—Ä–æ–≥–∏ –±–æ–ª–µ–µ 100 –º", "–ó–∞–ø—Ä–µ—â–µ–Ω–æ"],
        ["–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ—Ç –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏", "–ó–∞–ø—Ä–µ—â–∞–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ", "–£–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"],
        ["60 –∫–º/—á", "90 –∫–º/—á", "–ù–µ –±–æ–ª–µ–µ 40 –∫–º/—á"],
        ["–î–∞, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ", "–¢–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –¥—Ä—É–≥–∏—Ö –¢–°", "–ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"],
        ["–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ —Å–ø—Ä–∞–≤–∞", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ —Å–ª–µ–≤–∞", "–¢—Ä–∞–º–≤–∞–π"],
        ["–†–∞–∑—Ä–µ—à–µ–Ω–∞", "–ó–∞–ø—Ä–µ—â–µ–Ω–∞", "–†–∞–∑—Ä–µ—à–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ—Å–∞–¥–∫–∏"],
        ["–°–Ω–∏–∑–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å", "–£—Å—Ç—É–ø–∏—Ç—å –¥–æ—Ä–æ–≥—É –ø–µ—à–µ—Ö–æ–¥–∞–º", "–ü–æ–¥–∞—Ç—å –∑–≤—É–∫–æ–≤–æ–π —Å–∏–≥–Ω–∞–ª"],
        ["–†–∞–∑—Ä–µ—à–µ–Ω", "–ó–∞–ø—Ä–µ—â–µ–Ω", "–†–∞–∑—Ä–µ—à–µ–Ω, –µ—Å–ª–∏ –Ω–µ—Ç –∑–Ω–∞–∫–æ–≤"],
        ["–°–∏–Ω–∏–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º", "–ë–µ–ª—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —Å —á–µ—Ä–Ω–æ–π –ø–æ–ª–æ—Å–æ–π", "–ö–≤–∞–¥—Ä–∞—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"],
        ["–†–∞–∑—Ä–µ—à–∞–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ", "–ó–∞–ø—Ä–µ—â–∞–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ", "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ—Ç –æ —Å–º–µ–Ω–µ —Å–∏–≥–Ω–∞–ª–∞"]
    ];
    
    for (let i = 1; i <= count; i++) {
        const templateIndex = i % questionTemplates.length;
        
        questions.push({
            id: i,
            text: `${questionTemplates[templateIndex]} ${source ? `(${source})` : ''}`,
            options: answerTemplates[templateIndex].map((text, index) => ({
                id: index + 1,
                text: text
            })),
            correctAnswer: Math.floor(Math.random() * 3) + 1,
            explanation: "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –±—É–¥–µ—Ç –∑–¥–µ—Å—å..."
        });
    }
    
    return questions;
}

function displayQuestion() {
    const question = currentQuestions[currentQuestionIndex];
    if (!question) {
        console.log("‚ùå –ù–µ—Ç –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è");
        return;
    }
    
    console.log(`üìù –í–æ–ø—Ä–æ—Å ${currentQuestionIndex + 1}/${currentQuestions.length}`);
    
    // –ü—Ä–æ–≥—Ä–µ—Å—Å
    const progress = ((currentQuestionIndex) / currentQuestions.length) * 100;
    document.getElementById('progressFill').style.width = progress + '%';
    
    // –ù–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞
    document.getElementById('questionNumber').textContent = 
        `${currentQuestionIndex + 1}/${currentQuestions.length}`;
    
    // –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
    document.getElementById('questionText').textContent = question.text;
    
    // –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    const optionsContainer = document.getElementById('optionsContainer');
    optionsContainer.innerHTML = '';
    
    question.options.forEach(option => {
        const button = document.createElement('button');
        button.className = 'option-btn';
        button.textContent = option.text;
        button.onclick = () => selectAnswer(option.id);
        optionsContainer.appendChild(button);
    });
    
    // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
    startTimer(30);
}

function startTimer(seconds) {
    currentTimeLeft = seconds;
    const timerElement = document.getElementById('timer');
    
    if (timerInterval) {
        clearInterval(timerInterval);
    }
    
    timerElement.textContent = currentTimeLeft + 's';
    
    timerInterval = setInterval(() => {
        currentTimeLeft--;
        timerElement.textContent = currentTimeLeft + 's';
        
        if (currentTimeLeft <= 0) {
            clearInterval(timerInterval);
            handleTimeUp();
        }
    }, 1000);
}

function selectAnswer(optionId) {
    console.log(`üéØ –í—ã–±—Ä–∞–Ω –æ—Ç–≤–µ—Ç: ${optionId}`);
    
    if (timerInterval) {
        clearInterval(timerInterval);
    }
    
    const question = currentQuestions[currentQuestionIndex];
    const isCorrect = optionId === question.correctAnswer;
    
    // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ/–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ
    const options = document.querySelectorAll('.option-btn');
    options.forEach(btn => {
        btn.disabled = true;
        
        const btnText = btn.textContent;
        const correspondingOption = question.options.find(opt => opt.text === btnText);
        
        if (correspondingOption) {
            if (correspondingOption.id === question.correctAnswer) {
                btn.classList.add('correct');
            } else if (correspondingOption.id === optionId && !isCorrect) {
                btn.classList.add('incorrect');
            }
        }
    });
    
    if (isCorrect) {
        userScore++;
        console.log("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!");
    } else {
        console.log("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!");
    }
    
    // –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        currentQuestionIndex++;
        if (currentQuestionIndex < currentQuestions.length) {
            displayQuestion();
        } else {
            showResults();
        }
    }, 2000);
}

function handleTimeUp() {
    console.log("‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ!");
    
    const options = document.querySelectorAll('.option-btn');
    options.forEach(btn => {
        btn.disabled = true;
        btn.classList.add('incorrect');
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    const question = currentQuestions[currentQuestionIndex];
    const correctOption = question.options.find(opt => opt.id === question.correctAnswer);
    if (correctOption) {
        const correctBtn = Array.from(options).find(btn => btn.textContent === correctOption.text);
        if (correctBtn) {
            correctBtn.classList.add('correct');
        }
    }
    
    setTimeout(() => {
        currentQuestionIndex++;
        if (currentQuestionIndex < currentQuestions.length) {
            displayQuestion();
        } else {
            showResults();
        }
    }, 2000);
}

function showResults() {
    console.log(`üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: ${userScore}/${currentQuestions.length}`);
    
    document.getElementById('playerScore').textContent = userScore;
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å—á–µ—Ç –¥–ª—è –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ (–ò–ò –∏–ª–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞)
    const opponentScore = Math.min(
        currentQuestions.length,
        Math.max(0, userScore + Math.floor(Math.random() * 3) - 1)
    );
    document.getElementById('opponentScore').textContent = opponentScore;
    
    const resultMessage = document.getElementById('resultMessage');
    const correctAnswers = document.getElementById('correctAnswers');
    const ratingChange = document.getElementById('ratingChange');
    
    correctAnswers.textContent = `${userScore}/${currentQuestions.length}`;
    
    if (userScore > opponentScore) {
        resultMessage.textContent = 'üéâ –ü–û–ë–ï–î–ê! –¢–´ –ú–û–õ–û–î–ï–¶! üéâ';
        ratingChange.textContent = '+20';
        ratingChange.style.color = '#4ecdc4';
    } else if (userScore < opponentScore) {
        resultMessage.textContent = 'üòî –ü–û–†–ê–ñ–ï–ù–ò–ï! –ù–ï –†–ê–°–°–¢–†–ê–ò–í–ê–ô–°–Ø! üí™';
        ratingChange.textContent = '-10';
        ratingChange.style.color = '#ff6b6b';
    } else {
        resultMessage.textContent = 'ü§ù –ù–ò–ß–¨–Ø! –•–û–†–û–®–ê–Ø –ò–ì–†–ê! üëç';
        ratingChange.textContent = '+0';
        ratingChange.style.color = '#718096';
    }
    
    showScreen('resultsScreen');
}

function playAgain() {
    if (currentQuestions.length > 0) {
        currentQuestionIndex = 0;
        userScore = 0;
        showScreen('questionScreen');
        displayQuestion();
    } else {
        showScreen('mainScreen');
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–µ–±–∞–≥–∞
console.log("üîß Debug: –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã");

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è WebApp
tg.onEvent('viewportChanged', function() {
    console.log('üì± Viewport changed');
});

tg.onEvent('themeChanged', function() {
    console.log('üé® Theme changed');
});
